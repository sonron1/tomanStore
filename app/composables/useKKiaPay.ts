import type { KKiaPayConfig, KKiaPayResponse, KKiaPayError, TransactionData } from '~/types/kkiapay'

export const useKKiaPay = () => {
    const config = useRuntimeConfig()
    const isKkiaPayReady = ref(false)
    const isLoading = ref(false)
    const error = ref<string | null>(null)

    // ‚úÖ V√©rification de disponibilit√© du SDK
    const checkKkiaPayReady = (): boolean => {
        // ‚úÖ Utilisation d'import.meta.client au lieu de process.client
        if (import.meta.client) {
            const hasWidget = typeof window.openKkiapayWidget === 'function'
            const hasAddListener = typeof window.addKkiapayListener === 'function'
            const hasRemoveListener = typeof window.removeKkiapayListener === 'function'

            const ready = hasWidget && hasAddListener && hasRemoveListener
            isKkiaPayReady.value = ready

            console.log('üîç V√©rification SDK KKiaPay:', {
                hasWidget,
                hasAddListener,
                hasRemoveListener,
                isReady: ready
            })

            return ready
        }
        return false
    }

    // ‚úÖ Attente intelligente du SDK avec fallback
    const waitForKkiaPay = async (): Promise<boolean> => {
        return new Promise((resolve) => {
            if (checkKkiaPayReady()) {
                resolve(true)
                return
            }

            console.log('‚è≥ Attente du SDK KKiaPay...')
            isLoading.value = true

            // ‚úÖ Utiliser la fonction d'attente du plugin si disponible
            if (import.meta.client && window.waitForKkiaPay) {
                window.waitForKkiaPay().then((success) => {
                    isLoading.value = false
                    isKkiaPayReady.value = success
                    resolve(success)
                })
                return
            }

            // ‚úÖ Fallback avec v√©rification manuelle
            let attempts = 0
            const maxAttempts = 75 // 15 secondes

            const checkInterval = setInterval(() => {
                attempts++

                if (checkKkiaPayReady()) {
                    clearInterval(checkInterval)
                    isLoading.value = false
                    resolve(true)
                    return
                }

                if (attempts >= maxAttempts) {
                    clearInterval(checkInterval)
                    isLoading.value = false
                    error.value = 'Timeout: SDK KKiaPay non disponible'
                    console.error('‚ùå Timeout attente SDK KKiaPay')
                    resolve(false)
                }
            }, 200)
        })
    }

    // ‚úÖ Chargement dynamique du script si n√©cessaire
    const loadKkiaPayScript = (): Promise<boolean> => {
        return new Promise((resolve, reject) => {
            // ‚úÖ Utilisation d'import.meta.client au lieu de process.client
            if (!import.meta.client) {
                resolve(false)
                return
            }

            // V√©rifier si le script existe d√©j√†
            const existingScript = document.querySelector('script[src*="kkiapay"]')
            if (existingScript) {
                console.log('üìú Script KKiaPay d√©j√† pr√©sent')
                setTimeout(() => resolve(checkKkiaPayReady()), 1000)
                return
            }

            console.log('üì• Chargement dynamique du script KKiaPay...')

            const script = document.createElement('script')
            script.src = 'https://cdn.kkiapay.me/k.js'
            script.defer = true
            script.crossOrigin = 'anonymous'

            script.onload = () => {
                console.log('‚úÖ Script KKiaPay charg√© dynamiquement')
                setTimeout(() => {
                    resolve(checkKkiaPayReady())
                }, 1000)
            }

            script.onerror = (err) => {
                console.error('‚ùå Erreur chargement dynamique:', err)
                reject(new Error('√âchec du chargement du script KKiaPay'))
            }

            document.head.appendChild(script)
        })
    }

    // ‚úÖ Fonction de r√©cup√©ration compl√®te
    const ensureKkiaPayReady = async (): Promise<boolean> => {
        console.log('üõ°Ô∏è V√©rification/r√©cup√©ration du SDK KKiaPay...')
        error.value = null

        // 1. V√©rification imm√©diate
        if (checkKkiaPayReady()) {
            return true
        }

        // 2. Attendre le chargement normal
        const normalLoad = await waitForKkiaPay()
        if (normalLoad) {
            return true
        }

        // 3. Tentative de chargement dynamique
        console.log('üîß Tentative de r√©cup√©ration par chargement dynamique...')
        try {
            const dynamicLoad = await loadKkiaPayScript()
            if (dynamicLoad) {
                return true
            }
        } catch (err) {
            console.error('‚ùå Chargement dynamique √©chou√©:', err)
            error.value = 'Impossible de charger le SDK KKiaPay'
        }

        // 4. Derni√®re chance
        console.log('‚è∞ Derni√®re tentative...')
        return new Promise((resolve) => {
            setTimeout(() => {
                const success = checkKkiaPayReady()
                console.log(success ? 'üéâ R√©cup√©ration r√©ussie!' : 'üíÄ √âchec d√©finitif')
                if (!success) {
                    error.value = 'SDK KKiaPay d√©finitivement indisponible'
                }
                resolve(success)
            }, 3000)
        })
    }

    // ‚úÖ Ouverture du widget de paiement
    const openPayment = async (paymentConfig: Omit<KKiaPayConfig, 'key'>, transactionData?: TransactionData) => {
        try {
            console.log('üöÄ D√©but ouverture paiement KKiaPay...')
            error.value = null
            isLoading.value = true

            // V√©rifier la disponibilit√© du SDK
            const isReady = await ensureKkiaPayReady()
            if (!isReady) {
                throw new Error('SDK KKiaPay indisponible apr√®s toutes les tentatives')
            }

            // Configuration compl√®te du paiement
            const fullConfig: KKiaPayConfig = {
                key: config.public.kkiapayPublicKey,
                sandbox: config.public.isKkiapayDev,
                position: 'center',
                theme: 'blue',
                ...paymentConfig,
                // ‚úÖ Ajouter les donn√©es de transaction si fournies
                data: transactionData ? JSON.stringify(transactionData) : paymentConfig.data
            }

            console.log('üîß Configuration paiement:', {
                ...fullConfig,
                key: `${fullConfig.key?.slice(0, 8)}...`,
                data: transactionData ? '[Transaction Data]' : fullConfig.data?.slice(0, 50) + '...'
            })

            // Ouvrir le widget
            window.openKkiapayWidget(fullConfig)
            console.log('‚úÖ Widget KKiaPay ouvert')

        } catch (err) {
            console.error('‚ùå Erreur ouverture paiement:', err)
            error.value = err instanceof Error ? err.message : 'Erreur lors de l\'ouverture du paiement'
            throw err
        } finally {
            isLoading.value = false
        }
    }

    // ‚úÖ Gestion des √©v√©nements de paiement
    const setupPaymentListeners = (
        onSuccess: (response: KKiaPayResponse) => void,
        onError: (error: KKiaPayError) => void,
        onPending?: (response: any) => void
    ) => {
        // ‚úÖ Utilisation d'import.meta.client au lieu de process.client
        if (!import.meta.client || typeof window.addKkiapayListener !== 'function') {
            console.warn('‚ö†Ô∏è Listeners non disponibles')
            return
        }

        console.log('üîó Configuration des listeners de paiement...')

        // Success
        window.addKkiapayListener('success', (response: KKiaPayResponse) => {
            console.log('‚úÖ Paiement r√©ussi:', response)
            onSuccess(response)
        })

        // Failed
        window.addKkiapayListener('failed', (error: KKiaPayError) => {
            console.error('‚ùå Paiement √©chou√©:', error)
            onError(error)
        })

        // Pending (optionnel)
        if (onPending) {
            window.addKkiapayListener('pending', (response: any) => {
                console.log('‚è≥ Paiement en attente:', response)
                onPending(response)
            })
        }

        console.log('‚úÖ Listeners configur√©s')
    }

    // ‚úÖ Nettoyage des listeners
    const clearPaymentListeners = () => {
        // ‚úÖ Utilisation d'import.meta.client au lieu de process.client
        if (import.meta.client && typeof window.removeKkiapayListener === 'function') {
            console.log('üóëÔ∏è Nettoyage des listeners...')
            window.removeKkiapayListener('success')
            window.removeKkiapayListener('failed')
            window.removeKkiapayListener('pending')
        }
    }

    // ‚úÖ Fonction de test pour le d√©veloppement
    const testSDK = () => {
        // ‚úÖ Utilisation d'import.meta.client au lieu de process.client
        if (!import.meta.client) return

        console.log('üß™ Test complet du SDK KKiaPay:')
        console.log('- openKkiapayWidget:', typeof window.openKkiapayWidget)
        console.log('- addKkiapayListener:', typeof window.addKkiapayListener)
        console.log('- removeKkiapayListener:', typeof window.removeKkiapayListener)
        console.log('- Cl√© publique:', config.public.kkiapayPublicKey?.slice(0, 8) + '...')
        console.log('- Mode sandbox:', config.public.isKkiapayDev)
        console.log('- √âtat ready:', isKkiaPayReady.value)

        return {
            hasWidget: typeof window.openKkiapayWidget === 'function',
            hasListeners: typeof window.addKkiapayListener === 'function',
            config: {
                publicKey: config.public.kkiapayPublicKey,
                sandbox: config.public.isKkiapayDev
            }
        }
    }

    // ‚úÖ Auto-v√©rification c√¥t√© client avec import.meta.client
    if (import.meta.client) {
        onMounted(() => {
            // V√©rification initiale apr√®s montage
            setTimeout(() => {
                checkKkiaPayReady()
            }, 1000)

            // √âcouter les √©v√©nements SDK
            window.addEventListener('kkiapay-ready', () => {
                isKkiaPayReady.value = true
                error.value = null
            })

            window.addEventListener('kkiapay-error', () => {
                error.value = 'Erreur de chargement du SDK KKiaPay'
            })
        })

        // Nettoyage automatique
        onUnmounted(() => {
            clearPaymentListeners()
        })
    }

    return {
        // √âtats
        isKkiaPayReady: readonly(isKkiaPayReady),
        isLoading: readonly(isLoading),
        error: readonly(error),

        // M√©thodes principales
        ensureKkiaPayReady,
        openPayment,
        setupPaymentListeners,
        clearPaymentListeners,

        // Utilitaires
        checkKkiaPayReady,
        testSDK,

        // Configuration
        config: {
            publicKey: config.public.kkiapayPublicKey,
            sandbox: config.public.isKkiapayDev,
            baseUrl: config.public.kkiapayBaseUrl
        }
    }
}