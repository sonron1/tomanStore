import type { KKiaPayResponse, KKiaPayError, TransactionData } from '~/types/kkiapay'

export const usePayment = () => {
    const { openPayment, setupPaymentListeners, clearPaymentListeners, ensureKkiaPayReady, checkKkiaPayReady } = useKKiaPay()
    const cartStore = useCartStore()
    const notificationStore = useNotificationStore()
    const router = useRouter()

    const isProcessing = ref(false)
    const currentTransaction = ref<string | null>(null)

    // ‚úÖ G√©n√©rateur d'ID de commande (corrig√© - substring au lieu de substr)
    const generateOrderId = (): string => {
        const timestamp = Date.now().toString(36)
        const random = Math.random().toString(36).substring(2, 7) // ‚úÖ substring au lieu de substr
        return `TOM${timestamp}${random}`.toUpperCase()
    }

    // ‚úÖ V√©rification c√¥t√© serveur avec typage correct
    const verifyTransactionServer = async (transactionId: string): Promise<boolean> => {
        try {
            console.log('üîç V√©rification c√¥t√© serveur:', transactionId)

            // Appel √† l'API de v√©rification Nuxt
            const response = await $fetch<{
                success?: boolean
                data?: {
                    status?: string
                }
            }>('/api/verify-transaction', {
                method: 'POST',
                body: { transactionId }
            })

            if (response?.success && response?.data?.status === 'SUCCESSFUL') {
                console.log('‚úÖ Transaction v√©rifi√©e c√¥t√© serveur')
                return true
            } else {
                console.warn('‚ö†Ô∏è Transaction non confirm√©e c√¥t√© serveur')
                return false
            }
        } catch (error) {
            console.error('‚ùå Erreur v√©rification serveur:', error)
            return false
        }
    }

    // ‚úÖ Gestionnaire de succ√®s de paiement
    const handlePaymentSuccess = async (response: KKiaPayResponse) => {
        try {
            console.log('üéâ Paiement r√©ussi - Traitement...', response)

            currentTransaction.value = response.transactionId

            // ‚úÖ Afficher notification de succ√®s
            notificationStore.notifySuccess(
                'Paiement r√©ussi !',
                `Transaction ${response.transactionId.slice(0, 8)}... confirm√©e`
            )

            // ‚úÖ V√©rification c√¥t√© serveur (optionnelle)
            await verifyTransactionServer(response.transactionId)

            // ‚úÖ Vider le panier
            cartStore.clearCart()

            // ‚úÖ Rediriger vers la page de succ√®s
            await router.push({
                path: '/order-confirmation',
                query: {
                    transaction: response.transactionId,
                    amount: response.amount.toString()
                }
            })

        } catch (error) {
            console.error('‚ùå Erreur post-paiement:', error)

            notificationStore.notifyWarning(
                'Paiement effectu√©',
                'Votre paiement a √©t√© trait√© mais une erreur est survenue. Contactez le support si n√©cessaire.'
            )
        } finally {
            isProcessing.value = false
            clearPaymentListeners()
        }
    }

    // ‚úÖ Gestionnaire d'erreur de paiement
    const handlePaymentError = (error: KKiaPayError) => {
        console.error('‚ùå Paiement √©chou√©:', error)

        let errorMessage = 'Votre paiement a √©chou√©'

        // Messages d'erreur personnalis√©s selon le type
        if (error.message?.toLowerCase().includes('insufficient')) {
            errorMessage = 'Solde insuffisant'
        } else if (error.message?.toLowerCase().includes('network')) {
            errorMessage = 'Probl√®me de connexion'
        } else if (error.message?.toLowerCase().includes('canceled')) {
            errorMessage = 'Paiement annul√©'
        }

        notificationStore.notifyError(
            'Paiement √©chou√©',
            errorMessage
        )

        isProcessing.value = false
        clearPaymentListeners()
    }

    // ‚úÖ Gestionnaire de paiement en attente
    const handlePaymentPending = (response: any) => {
        console.log('‚è≥ Paiement en attente:', response)

        notificationStore.notifyInfo(
            'Paiement en cours',
            'Votre paiement est en cours de traitement...'
        )
    }

    // ‚úÖ Fonction principale de traitement du paiement (CORRECTION MAJEURE)
    const processPayment = async (checkoutData: {
        customer: {
            firstName: string
            lastName: string
            email: string
            phone: string
        }
        shipping: {
            address: string
            city: string
            phone: string
        }
        totals: {
            subtotal: number
            shipping: number
            total: number
        }
    }) => {
        if (isProcessing.value) {
            console.warn('‚ö†Ô∏è Paiement d√©j√† en cours...')
            return
        }

        try {
            console.log('üí≥ D√©but du processus de paiement...')
            isProcessing.value = true

            // ‚úÖ CORRECTION: V√©rification simple d'abord
            if (process.client && typeof window.openKkiapayWidget === 'function') {
                console.log('‚úÖ SDK KKiaPay disponible - utilisation directe')
            } else {
                // ‚úÖ Seulement si pas disponible, essayer ensureKkiaPayReady
                console.log('‚è≥ SDK non disponible, tentative de r√©cup√©ration...')
                const sdkReady = await ensureKkiaPayReady()
                if (!sdkReady) {
                    console.error('‚ùå SDK KKiaPay non disponible apr√®s r√©cup√©ration')
                    notificationStore.notifyError(
                        'Service indisponible',
                        'Le service de paiement est momentan√©ment indisponible. Veuillez r√©essayer dans quelques instants.'
                    )
                    return
                }
            }

            // ‚úÖ Pr√©parer les donn√©es de transaction (correction du typage)
            const transactionData: TransactionData = {
                orderId: generateOrderId(),
                cartItems: [...cartStore.items], // ‚úÖ Copier pour √©viter readonly
                shipping: checkoutData.shipping,
                customer: checkoutData.customer,
                totals: checkoutData.totals
            }

            // ‚úÖ Configurer les listeners avant d'ouvrir le paiement
            setupPaymentListeners(
                handlePaymentSuccess,
                handlePaymentError,
                handlePaymentPending
            )

            // ‚úÖ Configuration du paiement
            const paymentConfig = {
                amount: Math.round(checkoutData.totals.total),
                name: `${checkoutData.customer.firstName} ${checkoutData.customer.lastName}`,
                email: checkoutData.customer.email,
                phone: checkoutData.customer.phone,
                reason: `Commande TomanStore #${transactionData.orderId}`,
                partnerId: 'tomanstore',
            }

            console.log('üîß Ouverture du widget de paiement:', {
                ...paymentConfig,
                orderId: transactionData.orderId
            })

            // ‚úÖ CORRECTION: Utilisation directe si disponible, sinon openPayment
            if (process.client && typeof window.openKkiapayWidget === 'function') {
                const config = useRuntimeConfig()

                // ‚úÖ Configuration compl√®te du paiement avec typage correct
                const fullConfig = {
                    key: config.public.kkiapayPublicKey,
                    sandbox: config.public.isKkiapayDev,
                    position: 'center' as const, // ‚úÖ Type literal pour position
                    theme: 'blue' as const,     // ‚úÖ Type literal pour theme
                    ...paymentConfig,
                    data: JSON.stringify(transactionData)
                }

                console.log('üöÄ Ouverture directe du widget...')
                window.openKkiapayWidget(fullConfig)
                console.log('‚úÖ Widget de paiement ouvert avec succ√®s')
            } else {
                // ‚úÖ Fallback vers openPayment
                await openPayment(paymentConfig, transactionData)
                console.log('‚úÖ Widget de paiement ouvert via openPayment')
            }

        } catch (error) {
            console.error('‚ùå Erreur g√©n√©rale lors du paiement:', error)

            // ‚úÖ Gestion d'erreur plus robuste
            const errorMessage = error instanceof Error
                ? error.message
                : 'Une erreur inattendue est survenue lors de l\'initialisation du paiement'

            notificationStore.notifyError(
                'Erreur de paiement',
                errorMessage
            )

            // ‚úÖ Nettoyer les listeners en cas d'erreur
            clearPaymentListeners()
        } finally {
            // ‚úÖ S'assurer que isProcessing est remis √† false SEULEMENT si pas de paiement lanc√©
            // Le paiement remettra isProcessing √† false dans les handlers
        }
    }

    // ‚úÖ Fonction de nettoyage manuelle (utile pour les tests)
    const resetPayment = () => {
        isProcessing.value = false
        currentTransaction.value = null
        clearPaymentListeners()
        console.log('üîÑ √âtat de paiement r√©initialis√©')
    }

    // ‚úÖ Nettoyage automatique
    if (process.client) {
        onUnmounted(() => {
            clearPaymentListeners()
            isProcessing.value = false
        })
    }

    return {
        // √âtats
        isProcessing: readonly(isProcessing),
        currentTransaction: readonly(currentTransaction),

        // M√©thodes principales
        processPayment,
        verifyTransactionServer,
        resetPayment, // ‚úÖ Nouvelle m√©thode

        // Gestionnaires (expos√©s pour tests)
        handlePaymentSuccess,
        handlePaymentError,
        handlePaymentPending
    }
}